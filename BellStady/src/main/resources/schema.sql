--Requisite table
CREATE TABLE IF NOT EXISTS Requisite(
    id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    version INTEGER NOT NULL,
    inn VARCHAR(15) NOT NULL,
    cpp VARCHAR(15) NOT NULL
);

--Country table
CREATE TABLE IF NOT EXISTS Country(
    id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    version INTEGER NOT NULL,
    name VARCHAR(20) NOT NULL,
    code INTEGER
);

--Region table
CREATE TABLE IF NOT EXISTS Region(
    id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    version INTEGER NOT NULL,
    name VARCHAR(20) NOT NULL
);

--City table
CREATE TABLE IF NOT EXISTS City(
    id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    version INTEGER NOT NULL,
    name VARCHAR(25) NOT NULL
);

--Street table
CREATE TABLE IF NOT EXISTS Street(
    id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    version INTEGER NOT NULL,
    name VARCHAR(20) NOT NULL
);

--House table
CREATE TABLE IF NOT EXISTS House(
    id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    version INTEGER NOT NULL,
    number_house VARCHAR(15) NOT NULL,
    number_flat INTEGER,
    number_office VARCHAR(10)
);

--Address table
CREATE TABLE IF NOT EXISTS Address(
    id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    version INTEGER NOT NULL,
    country_id INTEGER,
    region_id INTEGER,
    city_id INTEGER,
    street_id INTEGER,
    house_id INTEGER,
    CONSTRAINT FK_Address_Country FOREIGN KEY(country_id) REFERENCES Country(id),
    CONSTRAINT FK_Address_Region FOREIGN KEY(region_id) REFERENCES Region(id),
    CONSTRAINT FK_Address_City FOREIGN KEY(city_id) REFERENCES City(id),
    CONSTRAINT FK_Address_Street FOREIGN KEY(street_id) REFERENCES Street(id),
    CONSTRAINT FK_Address_House FOREIGN KEY(house_id) REFERENCES House(id)
);

--Phone table
CREATE TABLE IF NOT EXISTS Phone(
    id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    version INTEGER NOT NULL,
    number_phone VARCHAR(15) NOT NULL,
);

--Organization table
CREATE TABLE IF NOT EXISTS Organization(
    id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    version INTEGER NOT NULL,
    short_name VARCHAR(50) NOT NULL,
    full_name VARCHAR(150) NOT NULL,
    recvisit_id INTEGER,
    address_id INTEGER,
    phone_id INTEGER,
    is_active BOOLEAN NOT NULL,
    CONSTRAINT FK_Organization_Requisite FOREIGN KEY(recvisit_id) REFERENCES Requisite(id),
    CONSTRAINT FK_Organization_Address FOREIGN KEY(address_id) REFERENCES Address(id),
    CONSTRAINT FK_Organization_Phone FOREIGN KEY(phone_id) REFERENCES Phone(id)
);

--Office table
CREATE TABLE IF NOT EXISTS Office(
    id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    version INTEGER NOT NULL,
    name VARCHAR(50) NOT NULL,
    address_id INTEGER,
    organization_id INTEGER,
    phone_id INTEGER,
    is_active BOOLEAN NOT NULL,
    CONSTRAINT FK_Office_Address FOREIGN KEY(address_id) REFERENCES Address(id),
    CONSTRAINT FK_Office_Organization FOREIGN KEY(organization_id) REFERENCES Organization(id),
    CONSTRAINT FK_Office_Phone FOREIGN KEY(phone_id) REFERENCES Phone(id)
);

--Position table
CREATE TABLE IF NOT EXISTS Position(
    id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    version INTEGER NOT NULL,
    name VARCHAR(25) NOT NULL
);

--Doc_type table
CREATE TABLE IF NOT EXISTS Doc_type(
    id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    version INTEGER NOT NULL,
    doc_code INTEGER,
    doc_name VARCHAR(70) NOT NULL,
    doc_number INTEGER NOT NULL,
    doc_date DATETIME
);

--Citizenship table
CREATE TABLE IF NOT EXISTS Citizenship(
    id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    version INTEGER NOT NULL,
    name VARCHAR(70) NOT NULL,
    code INTEGER NOT NULL
);

--Employee table
CREATE TABLE IF NOT EXISTS Employee(
    id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    version INTEGER NOT NULL,
    first_name VARCHAR(25) NOT NULL,
    second_name VARCHAR(25) NOT NULL,
    middle_name VARCHAR(25),
    position_id INTEGER,
    document_id INTEGER,
    citizenship_id INTEGER,
    phone_id INTEGER,
    office_id INTEGER,
    is_identified BOOLEAN NOT NULL,
    CONSTRAINT FK_User_Position FOREIGN KEY(position_id) REFERENCES Position(id),
    CONSTRAINT FK_User_Doc_type FOREIGN KEY(document_id) REFERENCES Doc_type(id),
    CONSTRAINT FK_User_Citizenship FOREIGN KEY(citizenship_id) REFERENCES Citizenship(id),
    CONSTRAINT FK_User_Phone FOREIGN KEY(phone_id) REFERENCES Phone(id)
);

--Authentication table
CREATE TABLE IF NOT EXISTS Authentication(
    id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
    version INTEGER NOT NULL,
    login VARCHAR(20) NOT NULL,
    pass VARCHAR(25) NOT NULL,
    name VARCHAR(15) NOT NULL,
    employee_id INTEGER,
    CONSTRAINT FK_Authentication_Employee FOREIGN KEY(employee_id) REFERENCES Employee(id)
);